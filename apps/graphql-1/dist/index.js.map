{"version":3,"sources":["../src/schema/index.ts","../src/schema/foo.ts","../src/schema/bar.ts","../src/index.ts","../src/datasources/FooAPI.ts"],"sourcesContent":["import { buildSubgraphSchema } from \"@apollo/subgraph\";\nimport foo from \"./foo\";\nimport bar from \"./bar\";\n\nexport function generateSubgraphSchema() {\n  return buildSubgraphSchema([foo, bar]);\n}\n","import gql from \"graphql-tag\";\nimport { Resolvers } from \"../__generated__/resolvers-types\";\n\nexport const typeDefs = gql`\n  extend type Query {\n    foos: [Foo]\n  }\n  type Foo @key(fields: \"id\") {\n    id: ID!\n    name: String\n  }\n`;\n\nexport const resolvers: Resolvers = {\n  Query: {\n    foos(_parent, _args, { dataSources }) {\n      return dataSources.FooAPI.getAllFoo();\n    },\n  },\n  Foo: {\n    __resolveReference(foo, { dataSources }) {\n      return dataSources.FooAPI.getFoo(foo.id);\n    },\n  },\n};\n\nconst documentNode = { typeDefs, resolvers };\n\nexport default documentNode;\n","import gql from \"graphql-tag\";\nimport { Resolvers } from \"../__generated__/resolvers-types\";\n\nexport const typeDefs = gql`\n  type Query {\n    bar(id: ID!): Bar\n  }\n\n  type Bar {\n    name: String\n    appendedName: String\n  }\n`;\n\nexport const resolvers: Resolvers = {\n  Query: {\n    async bar(_parent, { id }, { dataSources }) {\n      return { name: \"Bar\" };\n    },\n  },\n  Bar: {\n    appendedName(parent, _args, _context) {\n      return `${parent.name} - appended`;\n    },\n  },\n};\n\nconst documentNode = { typeDefs, resolvers };\nexport default documentNode;\n","import { generateSubgraphSchema } from \"./schema\";\nimport { ApolloServer } from \"apollo-server\";\nimport { FooAPI } from \"./datasources/FooAPI\";\n\nasync function main() {\n  let schema = generateSubgraphSchema();\n  const FooAPI2 = new FooAPI();\n\n  const server = new ApolloServer({\n    schema,\n    dataSources: () => ({ FooAPI: FooAPI2 }),\n    context: ({ req }) => {\n      return {\n        authorization: req?.headers[\"authorization\"] ?? \"\",\n      };\n    },\n    // cors: isProduction ? false : { origin: '*' },\n  });\n\n  await server\n    .listen({ port: 4000 })\n    .then(({ url }) => console.log(`Subgraph ready at: ${url}`));\n}\n\nmain();\n","import { DataSource } from \"apollo-datasource\";\nimport type { Foo } from \"../__generated__/resolvers-types\";\n\nexport class FooAPI extends DataSource {\n  getAllFoo(): [Foo] {\n    return foos;\n  }\n  getFoo(id: string): Foo {\n    return foos.find((f) => f.id === id) as Foo;\n  }\n}\n\nconst foos: [Foo] = [{ id: \"1\", name: \"Foo\" }];\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sBAAoC;;;ACApC,yBAAgB;AAGT,IAAM,WAAW,mBAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUjB,IAAM,YAAuB;AAAA,EAClC,OAAO;AAAA,IACL,KAAK,SAAS,OAAO,EAAE,YAAY,GAAG;AACpC,aAAO,YAAY,OAAO,UAAU;AAAA,IACtC;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH,mBAAmB,KAAK,EAAE,YAAY,GAAG;AACvC,aAAO,YAAY,OAAO,OAAO,IAAI,EAAE;AAAA,IACzC;AAAA,EACF;AACF;AAEA,IAAM,eAAe,EAAE,UAAU,UAAU;AAE3C,IAAO,cAAQ;;;AC5Bf,IAAAC,sBAAgB;AAGT,IAAMC,YAAW,oBAAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWjB,IAAMC,aAAuB;AAAA,EAClC,OAAO;AAAA,IACL,MAAM,IAAI,SAAS,EAAE,GAAG,GAAG,EAAE,YAAY,GAAG;AAC1C,aAAO,EAAE,MAAM,MAAM;AAAA,IACvB;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH,aAAa,QAAQ,OAAO,UAAU;AACpC,aAAO,GAAG,OAAO;AAAA,IACnB;AAAA,EACF;AACF;AAEA,IAAMC,gBAAe,EAAE,UAAAH,WAAU,WAAAE,WAAU;AAC3C,IAAO,cAAQC;;;AFxBR,SAAS,yBAAyB;AACvC,aAAO,qCAAoB,CAAC,aAAK,WAAG,CAAC;AACvC;;;AGLA,2BAA6B;;;ACD7B,+BAA2B;AAGpB,IAAM,SAAN,cAAqB,oCAAW;AAAA,EACrC,YAAmB;AACjB,WAAO;AAAA,EACT;AAAA,EACA,OAAO,IAAiB;AACtB,WAAO,KAAK,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE;AAAA,EACrC;AACF;AAEA,IAAM,OAAc,CAAC,EAAE,IAAI,KAAK,MAAM,MAAM,CAAC;;;ADR7C,eAAe,OAAO;AACpB,MAAI,SAAS,uBAAuB;AACpC,QAAM,UAAU,IAAI,OAAO;AAE3B,QAAM,SAAS,IAAI,kCAAa;AAAA,IAC9B;AAAA,IACA,aAAa,OAAO,EAAE,QAAQ,QAAQ;AAAA,IACtC,SAAS,CAAC,EAAE,IAAI,MAAM;AAX1B;AAYM,aAAO;AAAA,QACL,gBAAe,gCAAK,QAAQ,qBAAb,YAAiC;AAAA,MAClD;AAAA,IACF;AAAA,EAEF,CAAC;AAED,QAAM,OACH,OAAO,EAAE,MAAM,IAAK,CAAC,EACrB,KAAK,CAAC,EAAE,IAAI,MAAM,QAAQ,IAAI,sBAAsB,KAAK,CAAC;AAC/D;AAEA,KAAK;","names":["gql","import_graphql_tag","typeDefs","gql","resolvers","documentNode"]}